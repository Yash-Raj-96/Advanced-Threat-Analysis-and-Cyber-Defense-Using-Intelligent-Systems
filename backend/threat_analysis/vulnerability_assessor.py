import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import MinMaxScaler
import joblib

class VulnerabilityAssessor:
    def __init__(self, model_path="vuln_model.pkl", scaler_path="vuln_scaler.pkl"):
        self.model_path = model_path
        self.scaler_path = scaler_path
        self.model = None
        self.scaler = None
        self._load_components()

    def _load_components(self):
        try:
            self.model = joblib.load(self.model_path)
            self.scaler = joblib.load(self.scaler_path)
        except Exception:
            self.model = LogisticRegression()
            self.scaler = MinMaxScaler()

    def train(self, X: np.ndarray, y: np.ndarray):
        X_scaled = self.scaler.fit_transform(X)
        self.model.fit(X_scaled, y)
        joblib.dump(self.model, self.model_path)
        joblib.dump(self.scaler, self.scaler_path)

    def predict(self, X: np.ndarray):
        X_scaled = self.scaler.transform(X)
        return self.model.predict(X_scaled), self.model.predict_proba(X_scaled)

# âœ… Add this function to resolve the import error
def assess_vulnerabilities(input_array: np.ndarray):
    assessor = VulnerabilityAssessor()
    predictions, probabilities = assessor.predict(input_array)
    return predictions, probabilities
